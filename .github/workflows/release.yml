name: Create release
on:
  push:
    branches:
      - 'gh-actions'
    paths:
      - '.github/workflows/release.yml'
    # tags:
      # - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-binaries:
    name: Build and test binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            stack-build-args: build -j2 --local-bin-path=$(pwd) --copy-bins --ghc-options=-O2
          - os: macos-latest
            stack-build-args: build -j2 --local-bin-path=$(pwd) --copy-bins --ghc-options=-O2
          - os: windows-latest
            stack-build-args: build -j2 --flag hexpat:bundle --local-bin-path=$(pwd) --copy-bins --ghc-options=-O2 
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - uses: haskell/actions/setup@v2
        with:
          ghc-version: '9.4.5'
          enable-stack: true
          stack-no-global: true

      # - name: Install stack (MacOS)
      #   run: curl -sSL https://get.haskellstack.org/ | sh
      #   if: matrix.os == 'macos-10.15'

      # - name: Install stack (Windows)
      #   run: choco install haskell-stack
      #   if: matrix.os == 'windows-2019'

      # CACHING
      - name: Cache dependencies (Unix)
        uses: actions/cache@v3
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.stack
          key: ${{ runner.os }}-store-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('schedule-maker.cabal') }}

      - name: Cache dependencies (Windows)
        uses: actions/cache@v3
        if: matrix.os == 'windows-latest'
        with:
          path: C:\sr # 'C:\Users\runneradmin\AppData\Roaming\stack'
          key: ${{ runner.os }}-store-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('schedule-maker.cabal') }}

      - name: Cache GHC (Windows)
        uses: actions/cache@v3
        if: matrix.os == 'windows-latest'
        with:
          path: 'C:\Users\runneradmin\AppData\Local\Programs\stack'
          key: ghc-${{ hashFiles('stack.yaml.lock') }}

      # BUILD
      - name: Build (${{ runner.os }})
        run: stack ${{ matrix.stack-build-args }}

      # UPLOAD BINARIES
      - name: Upload artifact (Unix)
        uses: actions/upload-artifact@v3
        if: matrix.os != 'windows-latest'
        with:
          name: schedule-maker-${{ runner.os }}
          path: schedule-maker
          if-no-files-found: error

      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: schedule-maker-${{ runner.os }}
          path: schedule-maker.exe
          if-no-files-found: error

  create-release:
    runs-on: ubuntu-latest
    needs: 
      - build-binaries
    steps:
      - uses: actions/download-artifact@v3

      - name: Check artifacts
        run: ls -R

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            schedule-maker*/**
          name: bins
          if-no-files-found: error
